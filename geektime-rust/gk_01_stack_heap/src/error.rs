/*
首先，你使用起来就会感受到，Rust 是一门非常重视开发者用户体验的语言
其次，众所周知的优异性能和强大的表现力，让 Rust 在很多场合都能够施展拳脚
最后，是我自己的使用感觉，Rust 会越用越享受

从其他语言迁移到 Rust，必须要经过一段时期的思维转换（Paradigm Shift）, 变量的所有权和生命周期

Pascal 尼古拉斯·沃斯（Niklaus Wirth）算法 + 数据结构 = 程序。
想随心所欲地使用 Rust 为你的系统构建数据结构，深度掌握类型系统必不可少


费曼总结过他的学习方法，评价和分享 / 教授给别人是非常重要的步骤，能让你进一步巩固自己学到的知识和技能

第一性原理：回归事物最基础的条件，将其拆分成基本要素解构分析，来探索要解决的问题。


使用 Trait 做接口设计、使用泛型做编译期多态、使用 Trait Object 做运行时多态

unsafe rust 在编译器做的严格检查退步成为 C++ 的样子

Rust 适合计算密集型的任务

*/

// cargo build --bin error
fn main() {
    let name = "HelloWorld".to_string();
    // 隐含着线程不安全的访问, 对于编译错误，Rust 编译器会给出详细的错误原因，并给出建议的修复方法
    // 当前线程持有的变量 name 可能在新启动的线程使用之前就被释放，发生 use after free
    std::thread::spawn( || {
        println!("hello1 {}", name);
    });
}
